trap			:=	0:4	0:12
ret			:=	0:4	1:12
pushen			:=	0:4	2:12
popen			:=	0:4	4:12
allen			:=	0:4	8:12

call	.addr		:=	1:4	0:4	0:4	0:4	.addr:16
jump	.addr		:=	1:4	0:4	0:4	1:4	.addr:16
jumpf	$.d,.addr	:=	1:4	.d:4	0:4	3:4	.addr:16

lnot	$.d,$.s		:=	2:4	.d:4	.s:4	0:4
neg	$.d,$.s		:=	2:4	.d:4	.s:4	1:4
left	$.d,$.s		:=	2:4	.d:4	.s:4	2:4
right	$.d,$.s		:=	2:4	.d:4	.s:4	3:4
gor	$.d,$.s		:=	2:4	.d:4	.s:4	4:4
load	$.d,$.s		:=	2:4	.d:4	.s:4	8:4
store	$.d,$.s		:=	2:4	.d:4	.s:4	9:4

add	$.d,$.s,$.t	:=	4:4	.d:4	.s:4	.t:4
slt	$.d,$.s,$.t	:=	5:4	.d:4	.s:4	.t:4
sra	$.d,$.s,$.t	:=	6:4	.d:4	.s:4	.t:4
mul	$.d,$.s,$.t	:=	7:4	.d:4	.s:4	.t:4
and	$.d,$.s,$.t	:=	8:4	.d:4	.s:4	.t:4
or	$.d,$.s,$.t	:=	9:4	.d:4	.s:4	.t:4
xor	$.d,$.s,$.t	:=	10:4	.d:4	.s:4	.t:4
sll	$.d,$.s,$.t	:=	11:4	.d:4	.s:4	.t:4

li8	$.d,.i8		:=	12:4	.d:4	.i8:8
lu8	$.d,.i8		:=	13:4	.d:4	.i8:8
li	$.d,.i16 ?((.i16>-129)&&(.i16<128)) := {
				12:4	.d:4	.i16:8 }
li	$.d,.i16	:= {	12:4	.d:4	.i16:8
				13:4	.d:4	(.i16>>8):8 }

.const	{zero	IPROC	NPROC	sp	fp	rv	u0	u1
	 u2	u3	u4	u5	u6	u7	u8	u9 }

.segment .text 16 0x10000 0 .VMEM
.segment .data 16 0x10000 0 .VMEM
.const 0 .lowfirst ; defaults to wrong endian
